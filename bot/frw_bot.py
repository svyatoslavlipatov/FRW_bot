import random
import telebot
import webbrowser
import sqlite3
from telebot import types
from datetime import datetime


# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
file = open('./token.txt')
mytoken = file.read()
# –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot(mytoken)
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–π—Å—Ç–≤—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
current_section = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
last_displayed_products = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
carts = {}

#–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_all_products():
    conn = sqlite3.connect('./db/catalog.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, pic, price, brand, category, details FROM products")
    all_products_data = cursor.fetchall()
    conn.close()
    return all_products_data

# ----- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ------
def display_category(message, product_list, category_name, section_title):
    max_buttons_per_row = 2
    buttons = add_buttons_to_markup({str(product[0]): product[1] for product in product_list}, max_buttons_per_row)
    buttons.append([back_btns['back_catalog']])
    buttons.append([back_btns['back_home']])
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, f'–†–∞–∑–¥–µ–ª {section_title}:', reply_markup=markup)

def set_current_section_and_display_category(message, section_name, product_list, category_name, section_title):
    global current_section
    current_section = section_name
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    display_category(message, product_list, category_name, section_title)
def display_category_by_name(message, category_name, section_title):
    category_products = [product for product in products_list if product[5] == category_name]
    if category_products:
        set_current_section_and_display_category(message, category_name, category_products, category_name, section_title)
    else:
        bot.send_message(message.chat.id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{section_title}' –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

def drives_category(message):
    display_category_by_name(message, "drives", "AIRSOFT –ø—Ä–∏–≤–æ–¥–æ–≤ (–ú–æ–¥–µ–ª–∏ —Å—Ç—Ä–∞–π–∫–±–æ–ª—å–Ω–æ–≥–æ ¬´–æ—Ä—É–∂–∏—è¬ª)")

def sights_category(message):
    display_category_by_name(message, "sights", "–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—Ü–µ–ª—ã")

def gas_category(message):
    display_category_by_name(message, "gas", "–ì–∞–∑–∞")

def girboxes_category(message):
    display_category_by_name(message, "girboxes", "–ì–∏—Ä–±–æ–∫—Å–æ–≤")

def launchers_category(message):
    display_category_by_name(message, "launchers", "–ü—É—Å–∫–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def hopup_nodes_category(message):
    display_category_by_name(message, "hopup_nodes", "–•–æ–ø-–∞–ø–æ–≤")

def gears_category(message):
    display_category_by_name(message, "gears", "–®–µ—Å—Ç–µ—Ä–Ω–µ–π")

# ----- –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ------

products_list = load_all_products()

#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def create_account_table(user_id, telegram_username):
    connection = sqlite3.connect('./db/users.db')
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS account (
                        user_id INTEGER PRIMARY KEY,
                        telegram_username TEXT,
                        start_time TEXT,
                        last_activity_time TEXT
                    )''')
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º user_id
    cursor.execute('''SELECT user_id FROM account WHERE user_id = ?''', (user_id,))
    existing_user = cursor.fetchone()
    if not existing_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        cursor.execute(
            '''INSERT INTO account (user_id, telegram_username, start_time, last_activity_time) VALUES (?, ?, ?, ?)''',
            (user_id, telegram_username, current_time, current_time))
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∞
        cursor.execute('''UPDATE account SET last_activity_time = ? WHERE user_id = ?''', (current_time, user_id))
    connection.commit()
    connection.close()

# –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –¥–ª—è –±–æ—Ç–∞
answers = ['–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å.',
           '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.',
           '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.',
           '–£–≤—ã, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏... >_<'
           ]


# ------- –ö–Ω–æ–ø–∫–∏ -------
start_btns = {
    'catalog': 'üõç –ö–∞—Ç–∞–ª–æ–≥',
    'about': 'üõà –û –Ω–∞—Å',
    'faqs': 'üìÑ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã'
}
about_btns = {
    'number': 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    'address': 'üó∫Ô∏è –ê–¥—Ä–µ—Å'
}
faq_btns = {
    '–Ø–≤–ª—è—é—Ç—Å—è –ª–∏ –æ—Ä—É–∂–∏–µ–º —Ç–æ–≤–∞—Ä—ã?':  'C–æ–≥–ª–∞—Å–Ω–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É <i>"–û–± –æ—Ä—É–∂–∏–∏" –æ—Ç 13.12.1996 N 150-–§–ó.</i>  —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ <b>–ù–ï –Ø–í–õ–Ø–Æ–¢–°–Ø –û–†–£–ñ–ò–ï–ú!</b> '
                                    'Airsoft - –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞, —Å –¥—É–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –º–µ–Ω–µ–µ 3–î–∂, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —à–∞—Ä—ã - 6–º–º.',
    '–ü–æ—á–µ–º—É –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –ª—É—á—à–∏–µ?': '–ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –∫—Ä—É—Ç—ã–µ!'
}
back_btns = {
    'back': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
    'back_catalog': '‚Ü©Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥',
    'back_home': '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'
}
buy_btns = {
    'buy': '–ö—É–ø–∏—Ç—å',
    'cart': 'üõí –ö–æ—Ä–∑–∏–Ω–∞',
    'add_to_cart': 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'
}
goods_btns = {
    'drives': '–ü—Ä–∏–≤–æ–¥–∞',
    'sights': '–ü—Ä–∏—Ü–µ–ª—ã',
    'girboxes': '–ì–∏—Ä–±–æ–∫—Å—ã',
    'gas': '–ì–∞–∑',
    'launchers': '–ü—É—Å–∫–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    'gears': '–®–µ—Å—Ç–µ—Ä–Ω–∏',
    'hopup_nodes':'–£–∑–ª—ã —Ö–æ–ø-–∞–ø'
}
# ------- –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ -------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def random_answer(message):
    bot.send_message(message.chat.id, answers[random.randint(0, 3)])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_markup(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for row in buttons:
        markup.row(*row)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
def create_buttons_for_product():
    return [
        [buy_btns['add_to_cart']],
        [buy_btns['cart']],
        [back_btns['back'], back_btns['back_catalog']],
        [back_btns['back_home']]
    ]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
def add_buttons_to_markup(button_dict, max_buttons_per_row):
    buttons = []
    row = []
    for btn_key, btn_text in button_dict.items():
        row.append(btn_text)
        if len(row) == max_buttons_per_row:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return buttons

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
@bot.message_handler(content_types=['photo', 'sticker', 'audio'])
def get_photo(message):
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ :(')


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.from_user.id
    user_username = message.from_user.username

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ /start
    buttons = [
        [start_btns['catalog']],
        [buy_btns['cart']],
        [start_btns['about'], start_btns['faqs']],
    ]
    markup = create_markup(buttons)

    if message.text == '/start':
        create_account_table(user_id, user_username )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id,
                         f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n –í –Ω–∞—à–µ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π "FRW - Fire Rabbit Workshop" —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç—Ä–∞–π–∫–±–æ–ª–∞!\n –í–ö –º–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞: https://vk.com/petrucho_t',
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏ —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=markup)


#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@bot.message_handler(func=lambda message: message.text == buy_btns.get('add_to_cart'))
def inquire_about_product(message):
    user_id = message.chat.id
    if user_id in last_displayed_products:
        selected_product_info = last_displayed_products[user_id][0]  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        selected_product_name = selected_product_info["–Ω–∞–∑–≤–∞–Ω–∏–µ"]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        selected_product_price = selected_product_info["—Ü–µ–Ω–∞"]  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞

        if user_id not in carts:
            carts[user_id] = []  # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É

        cart_item = {"–Ω–∞–∑–≤–∞–Ω–∏–µ": selected_product_name, "—Ü–µ–Ω–∞": selected_product_price}
        carts[user_id].append(cart_item)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        bot.send_message(message.chat.id, f'–¢–æ–≤–∞—Ä "{selected_product_name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
        print(carts)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")


#–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã + —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –Ω–µ—ë
@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞' or message.text.lower() == '–≤—Å–µ')
def show_cart(message):
    buttons = [
        [buy_btns['buy']],
        [back_btns['back_home']]
    ]
    markup = create_markup(buttons)
    user_id = message.chat.id
    if user_id in carts:
        if message.text.lower() == '–≤—Å–µ':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ "–≤—Å–µ"
            carts[user_id] = []  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=markup)
            return
        cart_items = carts[user_id]
        if cart_items:
            total_price = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
            requires_confirmation = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ–ø–æ–ª–Ω–æ–π —Ü–µ–Ω–æ–π
            response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
            for i, item in enumerate(cart_items, start=1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ü–µ–Ω—ã
                if any(char.isdigit() for char in item["—Ü–µ–Ω–∞"]):
                    price = int(''.join(filter(str.isdigit, item["—Ü–µ–Ω–∞"])))  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ —Ü–µ–Ω—ã
                else:
                    price = 0  # –ï—Å–ª–∏ —Ü–∏—Ñ—Ä –≤–æ–æ–±—â–µ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É —Ä–∞–≤–Ω–æ–π –Ω—É–ª—é
                    requires_confirmation = True
                total_price += price  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∫ –æ–±—â–µ–π —Å—É–º–º–µ
                response += f'{i}. –ù–∞–∑–≤–∞–Ω–∏–µ: {item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]}, –¶–µ–Ω–∞: {item["—Ü–µ–Ω–∞"]}\n'
            total_price_str = str(total_price) + "‚ÇΩ"
            if requires_confirmation:
                total_price_str += " (—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)"
            response += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            response += "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'."
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",  reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",  reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in [name_product[1] for name_product in products_list])
def handle_product_message(message):
    user_id = message.chat.id
    last_displayed_products[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_name = message.text
    for product in products_list:
        if product_name == product[1]:
            last_displayed_products[user_id].append({"–Ω–∞–∑–≤–∞–Ω–∏–µ": product[1], "—Ü–µ–Ω–∞": product[3]})  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(last_displayed_products)

            response = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n"
            response += f"–¶–µ–Ω–∞: {product[3]}\n"
            response += f"–ë—Ä–µ–Ω–¥: {product[4]}\n"
            response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product[6]}"
            caption = response

            photo_path = product[2]  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = open(photo_path, 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            bot.send_photo(message.chat.id, photo, caption=caption)
            photo.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

            buttons = create_buttons_for_product()
            markup = create_markup(buttons)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            return


#–ö—É–ø–∏—Ç—å
@bot.message_handler(func=lambda message: message.text == buy_btns['buy'])
def buy_product(message):
    user_id = message.chat.id
    if user_id in carts:
        cart_items = carts[user_id]
        if cart_items:
            response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
            total_price = 0
            requires_confirmation = False
            cart_text = "<pre>"
            item_counts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            already_printed = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for item in cart_items:
                item_name = item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
                item_counts[item_name] = item_counts.get(item_name, 0) + 1
            i = 1  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤
            for item in cart_items:
                item_name = item["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
                if item_name not in already_printed:
                    if any(char.isdigit() for char in item["—Ü–µ–Ω–∞"]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ü–µ–Ω—ã
                        price = int(''.join(filter(str.isdigit, item["—Ü–µ–Ω–∞"])))
                    else:
                        price = 0  # –ï—Å–ª–∏ —Ü–∏—Ñ—Ä –≤–æ–æ–±—â–µ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É —Ä–∞–≤–Ω–æ–π –Ω—É–ª—é
                        requires_confirmation = True
                    total_price += price * item_counts[item_name]  # –£–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ —Ç–æ–≤–∞—Ä–∞
                    if item_counts[item_name] > 1:
                        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ 1, –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –∏ —É–º–Ω–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                        cart_text += f'{i}. –¢–æ–≤–∞—Ä: {item_name} ({item_counts[item_name]} —à—Ç—É–∫–∏), –¶–µ–Ω–∞: {item["—Ü–µ–Ω–∞"]} * {item_counts[item_name]} = {price * item_counts[item_name]}‚ÇΩ\n'
                    else:
                        cart_text += f'{i}. –¢–æ–≤–∞—Ä: {item_name}, –¶–µ–Ω–∞: {item["—Ü–µ–Ω–∞"]}\n'
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö
                    already_printed.append(item_name)
                    i += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if requires_confirmation:
                cart_text += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ (—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)\n"
            else:
                cart_text += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ\n"
            cart_text += "</pre>"
            response += cart_text
            response += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è) –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://t.me/liipkka'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>"
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –∫–Ω–æ–ø–∫–∞—Ö
@bot.message_handler(func=lambda message: True)
def info(message):
    if message.text == start_btns.get('catalog'):
        goodsChapter(message)

    elif message.text == start_btns.get('about'):
        aboutUs(message)

    elif message.text == start_btns.get('faqs'):
        faqAnswer(message)

    elif message.text == about_btns.get('number'):
        bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> 7 (924) 834-88-86', parse_mode='html')

    elif message.text == about_btns.get('address'):
        bot.send_message(message.chat.id,'<b>–ê–¥—Ä–µ—Å:</b> –ò—Ä–∫—É—Ç—Å–∫, –î–µ–∫–∞–±—Ä—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π, 102', parse_mode='html')

    elif message.text == goods_btns.get('drives'):
        drives_category(message)

    elif message.text == goods_btns.get('sights'):
        sights_category(message)

    elif message.text == goods_btns.get('gas'):
        gas_category(message)

    elif message.text == goods_btns.get('girboxes'):
        girboxes_category(message)

    elif message.text == goods_btns.get('launchers'):
        launchers_category(message)

    elif message.text == goods_btns.get('hopup_nodes'):
        hopup_nodes_category(message)

    elif message.text == goods_btns.get('gears'):
        gears_category(message)

    elif message.text == buy_btns.get('buy'):
        webbrowser.open('')

    elif message.text == back_btns.get('back'):
        if current_section:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ —Ä–∞–∑–¥–µ–ª–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            if current_section == "drives":
                drives_category(message)
            elif current_section == "sights":
                sights_category(message)
            elif current_section == "gas":
                gas_category(message)
            elif current_section == "girboxes":
                girboxes_category(message)
            elif current_section == "launchers":
                launchers_category(message)
            elif current_section == "hopup_nodes":
                hopup_nodes_category(message)
            elif current_section == "gears":
                gears_category(message)
        else:
            goodsChapter(message)

    elif message.text in faq_btns:
        text = f'{faq_btns[message.text]}'
        bot.send_message(message.chat.id, text, parse_mode='html')

    elif message.text == back_btns.get('back_catalog'):
        goodsChapter(message)

    elif message.text == back_btns.get('back_home'):
        welcome(message)

    else:
        random_answer(message)

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤
def goodsChapter(message):
    user_id = message.from_user.id
    user_username = message.from_user.username
    create_account_table(user_id, user_username)
    max_buttons_per_row = 3
    buttons = add_buttons_to_markup(goods_btns, max_buttons_per_row)
    buttons.append([back_btns['back_home']])
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª –æ –Ω–∞—Å
def aboutUs(message):
    buttons = [
        [about_btns['number'], about_btns['address']],
        [back_btns['back_home']]
    ]
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, '–†–∞–∑–¥–µ–ª "–û –Ω–∞—Å".\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å.', reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å —á–∞—Å—Ç—ã—Ö
def faqAnswer(message):
    buttons = []
    row = []
    for btn_key in faq_btns:
        row.append(btn_key)
        if len(row) == 3:  # –ö–æ–≥–¥–∞ –≤ —Ä—è–¥—É —É–∂–µ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ä—è–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            buttons.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        buttons.append(row)
    buttons.append([back_btns['back_home']])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    markup = create_markup(buttons)
    bot.send_message(message.chat.id, '–†–∞–∑–¥–µ–ª "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã".\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.', reply_markup=markup)

# –°—Ç—Ä–æ—á–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å
bot.polling(none_stop=True)